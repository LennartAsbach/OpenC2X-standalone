/*! \mainpage Documentation
 * \section Overview
 * The ITS Protocol Stack implementation includes Decentralized Congestion Control (DCC), services like Cooperative Awareness Service (CaService), 
 * Decentralized Environmental Notification Service (DenService), modifications in the transmission path in the Linux kernel 3.18 and a web interface to 
 * view the current position and monitor the incoming or outgoing CAMs, DENMs and DCC states.
 *
 * \section high_level_arch High level architecture 
 * ![High Level Architecture Diagram](../res/architecture.png "High Level Architecture Diagram")
 * Available modules and their communication.
 * For more information on the modules, see <a href="modules.html"> Modules</a>.
 * 
 * \section compile_sec Compiling the source
 * To fulfill the package dependencies, run the following command in the terminal.
 * \verbatim sudo apt-get install libzmq3-dev libboost-all-dev protobuf-compiler libprotobuf-dev libgps-dev gpsd gpsd-clients libnl-3-200 libnl-3-dev libnl-genl-3-200 libnl-genl-3-dev sqlite3 libsqlite3-dev tmux \endverbatim
 *
 * To compile, run the script.
 * \verbatim ./scripts/compileAll.sh \endverbatim
 * All code was written to be compiled and run on Debian Jessie 8 i386 (currently on apu, alix, and gericom).
 * 
 * \section config_sec Setting configuration
 * There are 2 types of config files in the system.
 * \li GlobalConfig: It contains the system related configuration like experiment number, interface name etc.
 * It can be found in ''common/config/config.xml''
 * \li Config: Every module also has it's own configuration e.g. CaServiceConfig in CaService, which can be found in ''\<module\>/config/config.xml''
 *
 * \subsection log_subsec Logging Outputs 
 * INFO, DEBUG and ERROR logging levels have been used in the software. The logging configs can also be set in logging.conf and statistics.conf in every ''\<module\>/config/''.
 *
 * \section run_sec Execution
 * After compiling the executable for each module can be found at \<module\>/Debug/ and executed by hand. But there are also
 * scripts to automate the starting process. Tmux need to be installed for these scripts.
 * The application can be run locally by the script.
 * \verbatim ./scripts/runAllLocal.sh \endverbatim
 * To stop the execution run on the local machine
 * \verbatim tmux kill-session \endverbatim
 * There are two ways to run the Application on a remote like an alix box. But first the compiled repo needs to be copied to
 * the remote home dir. Then following actions are possible.
 *
 * \subsection run_sec_1 the brittle but comfortable way
 * The most comfortable way to start and setup everything is to simply run
 * \verbatim ./scripts/runAllSSH.sh ssh-configuration-name\endverbatim
 * Replace "ssh-configuration-name" with the name of the remote target in the local ssh configuration eg. "alix6". Preferably
 * the keys are already copied to the target so password-less ssh connections are possible. This script executes the setup script
 * on the remote and opens on the local machine a tmux session. This session is split in multiple planes and in each plane a
 * separate ssh session is opened. Then in each ssh session one module is executed. Afterwards in a separate panel a ssh
 * port forwarding tunnel is opened (for the monitoring interface) and on the local machine the monitoring webpage is opened.
 * To stop the execution run on the local machine
 * \verbatim tmux kill-session \endverbatim
 * The problem with this method is that if the ssh connection is lost the execution of the application is aborted and everything
 * needs to be restarted.
 *
 * \subsection run_sec_2 the robust but tedious way
 *
 * A more robust alternative starts with opening a ssh connection to the remote. There execute the
 * \verbatim setup_interfaces.sh \endverbatim
 * afterwards run
 * \verbatim scripts/runAllLocal.sh \endverbatim
 * on the remote. Back in a new terminal on the local machine run
 * \verbatim scripts/sshTunnel.sh ssh-configuration-name \endverbatim
 * (Replace "ssh-configuration-name" with the name of the remote target in the local ssh configuration eg. "alix6".)\n
 * and open the Monitor website at
 * \verbatim webSite/index.html \endverbatim
 * to stop the execution run on the remote machine
 * \verbatim tmux kill-session \endverbatim
 * If the ssh connection is lost simply restart the ssh tunnel and run on the remote machine
 * \verbatim tmux attach \endverbatim
 * 
 *
 * \section gui_sec Web Interface
 * See @ref websiteTutorial "Website Tutorial"
 *
 * \section highlights_sec Feature Highlights
 *	For a list of feature Highlights see @ref highlight "Feature Highlights List"
 * \section standard_sec Standard Conformity
 * Everything we know of which is not conform to the ETSI ITS standard and influences the external behavior of the Application
 * is listed in @ref nonStandard "Not conform to ETSI ITS standard list"
 *
 * \section eclipse Eclipse Integration
 * Every folder in the Repository is an working Eclipse Project.
 * \n
 * Used Plugins:
 * - Base: Eclipse Mars 4.5.1 CDT
 * - Doxygen editor: eclox (not up to date but still working)
 * - Javascript editor:
 * 	- "web dev tools" and "js dev tools" from the eclipse repositories (Help -> Install new Software)
 * 	- "tern" from eclipse marketplace (Help -> Eclipse Marketplace)
 *
 * \section ports Port Diagramm
 * Diagram of ports used by zmq and http between the modules
 * ![Diagram of used Ports](../res/portDiagram.png "Diagram of used Ports")
 *
 * \section license_sec Licenses
 * Brief license information of used software.
 * Software		| License information
 * ------------ | -----------------
 * ZMQ			| LGPLv3 with a static linking exception including for iPhone apps
 * Boost		| Include copyright notice http://www.boost.org/users/license.html
 * Protobuffer	| Include copyright notice https://github.com/google/protobuf/blob/master/LICENSE 
 * GPSd			| Most of GPSD is under the permissive BSD license. Some portions are under other permissive licenses, including the MIT/X license and the ISC license. 
 * Netlink		| LGPL: https://github.com/tgraf/libnl/blob/master/COPYING 
 * SQLite		| Public domain: https://www.sqlite.org/copyright.html 
 * Easylogging++| MIT license, include copyright notice: https://github.com/easylogging/easyloggingpp#licence 
 * Pbjson		| Include copyright notice: https://github.com/yinqiwen/pbjson/blob/master/LICENSE 
 * Crow			| Include copyright notice: https://github.com/ipkn/crow/blob/master/LICENSE 
 * jQuery		| jQuery Foundation projects are released under the terms of the license specified in the project's repository or if not specified, under the MIT license.
 * Leaflet		| Include copyright notice: https://github.com/Leaflet/Leaflet/blob/master/LICENSE
 * OpenStreetMap| OpenStreetMapÂ® is open data, licensed under the Open Data Commons Open Database License (ODbL) by the OpenStreetMap Foundation (OSMF).

 */
